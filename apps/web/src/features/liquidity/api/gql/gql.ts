/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  '\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n':
    types.PairByIdDocument,
  '\n  query Query(\n    $orderBy: [PairOrderByInput!]\n    $where: PairWhereInput\n    $limit: Int\n    $offset: Int\n  ) {\n    pairs(orderBy: $orderBy, where: $where, limit: $limit, offset: $offset) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n':
    types.QueryDocument,
  '\n  query LiquidityPositions(\n    $where: LiquidityPositionWhereInput\n    $orderBy: [LiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n    $liquidityPositionsWhere2: LiquidityPositionWhereInput\n    $liquidityPositionsOrderBy2: [LiquidityPositionOrderByInput!]\n    $liquidityPositionsOffset2: Int\n    $liquidityPositionsLimit2: Int\n  ) {\n    liquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        id\n        liquidityPositions(\n          where: $liquidityPositionsWhere2\n          orderBy: $liquidityPositionsOrderBy2\n          offset: $liquidityPositionsOffset2\n          limit: $liquidityPositionsLimit2\n        ) {\n          id\n          liquidityTokenBalance\n        }\n        usdSwapped\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        reserve0\n        reserve1\n        totalSupply\n        reserveETH\n        reserveUSD\n        trackedReserveETH\n        token0Price\n        token1Price\n        volumeToken0\n        volumeToken1\n        volumeUSD\n        untrackedVolumeUSD\n        txCount\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n      }\n      liquidityTokenBalance\n    }\n  }\n':
    types.LiquidityPositionsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n',
): (typeof documents)['\n  query PairById($pairByIdId: String!) {\n    pairById(id: $pairByIdId) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query Query(\n    $orderBy: [PairOrderByInput!]\n    $where: PairWhereInput\n    $limit: Int\n    $offset: Int\n  ) {\n    pairs(orderBy: $orderBy, where: $where, limit: $limit, offset: $offset) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n',
): (typeof documents)['\n  query Query(\n    $orderBy: [PairOrderByInput!]\n    $where: PairWhereInput\n    $limit: Int\n    $offset: Int\n  ) {\n    pairs(orderBy: $orderBy, where: $where, limit: $limit, offset: $offset) {\n      id\n      token0 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n        totalSupply\n        tradeVolume\n        tradeVolumeUSD\n        untrackedVolumeUSD\n        txCount\n        totalLiquidity\n        derivedETH\n        memeToken {\n          id\n          userAddress\n          tokenAddress\n          tokenName\n          tokenSymbol\n          tokenPrice\n          tokenV60Initiated\n          v60LpTokenAddress\n          ownerAllocation\n          activityVaultAllocation\n          memeCreatedAt\n        }\n      }\n      reserve0\n      reserve1\n      totalSupply\n      reserveETH\n      reserveUSD\n      trackedReserveETH\n      token0Price\n      token1Price\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n      createdAtTimestamp\n      createdAtBlockNumber\n      liquidityProviderCount\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query LiquidityPositions(\n    $where: LiquidityPositionWhereInput\n    $orderBy: [LiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n    $liquidityPositionsWhere2: LiquidityPositionWhereInput\n    $liquidityPositionsOrderBy2: [LiquidityPositionOrderByInput!]\n    $liquidityPositionsOffset2: Int\n    $liquidityPositionsLimit2: Int\n  ) {\n    liquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        id\n        liquidityPositions(\n          where: $liquidityPositionsWhere2\n          orderBy: $liquidityPositionsOrderBy2\n          offset: $liquidityPositionsOffset2\n          limit: $liquidityPositionsLimit2\n        ) {\n          id\n          liquidityTokenBalance\n        }\n        usdSwapped\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        reserve0\n        reserve1\n        totalSupply\n        reserveETH\n        reserveUSD\n        trackedReserveETH\n        token0Price\n        token1Price\n        volumeToken0\n        volumeToken1\n        volumeUSD\n        untrackedVolumeUSD\n        txCount\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n      }\n      liquidityTokenBalance\n    }\n  }\n',
): (typeof documents)['\n  query LiquidityPositions(\n    $where: LiquidityPositionWhereInput\n    $orderBy: [LiquidityPositionOrderByInput!]\n    $offset: Int\n    $limit: Int\n    $liquidityPositionsWhere2: LiquidityPositionWhereInput\n    $liquidityPositionsOrderBy2: [LiquidityPositionOrderByInput!]\n    $liquidityPositionsOffset2: Int\n    $liquidityPositionsLimit2: Int\n  ) {\n    liquidityPositions(\n      where: $where\n      orderBy: $orderBy\n      offset: $offset\n      limit: $limit\n    ) {\n      id\n      user {\n        id\n        liquidityPositions(\n          where: $liquidityPositionsWhere2\n          orderBy: $liquidityPositionsOrderBy2\n          offset: $liquidityPositionsOffset2\n          limit: $liquidityPositionsLimit2\n        ) {\n          id\n          liquidityTokenBalance\n        }\n        usdSwapped\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        token1 {\n          id\n          symbol\n          name\n          decimals\n          totalSupply\n          tradeVolume\n          tradeVolumeUSD\n          untrackedVolumeUSD\n          txCount\n          totalLiquidity\n          derivedETH\n          memeToken {\n            id\n            userAddress\n            tokenAddress\n            tokenName\n            tokenSymbol\n            tokenPrice\n            tokenV60Initiated\n            v60LpTokenAddress\n            ownerAllocation\n            activityVaultAllocation\n            memeCreatedAt\n          }\n        }\n        reserve0\n        reserve1\n        totalSupply\n        reserveETH\n        reserveUSD\n        trackedReserveETH\n        token0Price\n        token1Price\n        volumeToken0\n        volumeToken1\n        volumeUSD\n        untrackedVolumeUSD\n        txCount\n        createdAtTimestamp\n        createdAtBlockNumber\n        liquidityProviderCount\n      }\n      liquidityTokenBalance\n    }\n  }\n'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
