{
  "address": "0xcDCb8A524798aaD1f6FE00fcd867eDf757353B71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "getGasCostOfGetLiquidityValueAfterArbitrageToPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityValueAfterArbitrageToPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenB",
          "type": "uint256"
        }
      ],
      "name": "getReservesAfterArbitrage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99693e16f57a54b2ad42a21d6fe37082a2434b9509f82a7f8e726f6ed68318bc",
  "receipt": {
    "to": null,
    "from": "0x55594E57F80b2deCd63608A4F2802F8003633aD2",
    "contractAddress": "0xcDCb8A524798aaD1f6FE00fcd867eDf757353B71",
    "transactionIndex": 0,
    "gasUsed": "1119946",
    "logsBloom": "0x
    "blockHash": "0xf04a4a60acff59a1819be5d0dc2e750637881730dc00e47bee08e61881b950da",
    "transactionHash": "0x99693e16f57a54b2ad42a21d6fe37082a2434b9509f82a7f8e726f6ed68318bc",
    "logs": [],
    "blockNumber": 329116,
    "cumulativeGasUsed": "1119946",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3B73a7eDc9dfE4847a20BcCfEf6Eb1c90439f5C9"],
  "numDeployments": 1,
  "solcInputHash": "3cdb485f86cd2a7b347e94a63868a282",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"getGasCostOfGetLiquidityValueAfterArbitrageToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"getLiquidityValueAfterArbitrageToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenB\",\"type\":\"uint256\"}],\"name\":\"getReservesAfterArbitrage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/UV2Library.sol\":\"UV2Library\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\"},\"@uniswap/lib/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xc4ffcf28169f73fc9fdd1f82345d6d4fcccf3fd5aea83c133437c25e4e0950a9\"},\"@v60swap/core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (address pair);\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  ) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n\\n  function v60AddressRegistry() external returns (address);\\n}\\n\",\"keccak256\":\"0xabde8250be8d590385ad18208d3c872f646a10ad508dd78b73c811cafeff0722\"},\"@v60swap/core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x27f0ea82f879b3b01387b583e6d9d0ec858dca3b22b0aad173f8fbda06e761e1\"},\"contracts/libraries/UV2Library.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"./UniswapV2LiquidityMathLibrary.sol\\\";\\n\\ncontract UV2Library {\\n  using SafeMath for uint256;\\n\\n  address public immutable factory;\\n\\n  constructor(address factory_) public {\\n    factory = factory_;\\n  }\\n\\n  // see UniswapV2LiquidityMathLibrary#getReservesAfterArbitrage\\n  function getReservesAfterArbitrage(\\n    address tokenA,\\n    address tokenB,\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB\\n  ) external view returns (uint256 reserveA, uint256 reserveB) {\\n    return\\n      UniswapV2LiquidityMathLibrary.getReservesAfterArbitrage(\\n        factory,\\n        tokenA,\\n        tokenB,\\n        truePriceTokenA,\\n        truePriceTokenB\\n      );\\n  }\\n\\n  // see UniswapV2LiquidityMathLibrary#getLiquidityValue\\n  function getLiquidityValue(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidityAmount\\n  ) external view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n    return\\n      UniswapV2LiquidityMathLibrary.getLiquidityValue(\\n        factory,\\n        tokenA,\\n        tokenB,\\n        liquidityAmount\\n      );\\n  }\\n\\n  // see UniswapV2LiquidityMathLibrary#getLiquidityValueAfterArbitrageToPrice\\n  function getLiquidityValueAfterArbitrageToPrice(\\n    address tokenA,\\n    address tokenB,\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB,\\n    uint256 liquidityAmount\\n  ) external view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n    return\\n      UniswapV2LiquidityMathLibrary.getLiquidityValueAfterArbitrageToPrice(\\n        factory,\\n        tokenA,\\n        tokenB,\\n        truePriceTokenA,\\n        truePriceTokenB,\\n        liquidityAmount\\n      );\\n  }\\n\\n  // test function to measure the gas cost of the above function\\n  function getGasCostOfGetLiquidityValueAfterArbitrageToPrice(\\n    address tokenA,\\n    address tokenB,\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB,\\n    uint256 liquidityAmount\\n  ) external view returns (uint256) {\\n    uint gasBefore = gasleft();\\n    UniswapV2LiquidityMathLibrary.getLiquidityValueAfterArbitrageToPrice(\\n      factory,\\n      tokenA,\\n      tokenB,\\n      truePriceTokenA,\\n      truePriceTokenB,\\n      liquidityAmount\\n    );\\n    uint gasAfter = gasleft();\\n    return gasBefore - gasAfter;\\n  }\\n}\\n\",\"keccak256\":\"0x66bf9b6b562dba60103ef381af23c4b0aef383819cd9ca18c067f1e6ddd6f63d\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"@v60swap/core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@v60swap/core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n  using SafeMath for uint;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = IUniswapV2Factory(factory).getPair(token0, token1);\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint reserveA, uint reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint reserve0, uint reserve1, ) = IUniswapV2Pair(\\n      pairFor(factory, tokenA, tokenB)\\n    ).getReserves();\\n\\n    (reserveA, reserveB) = tokenA == token0\\n      ? (reserve0, reserve1)\\n      : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) internal pure returns (uint amountB) {\\n    require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) internal pure returns (uint amountOut) {\\n    require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint amountInWithFee = amountIn.mul(997);\\n    uint numerator = amountInWithFee.mul(reserveOut);\\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) internal pure returns (uint amountIn) {\\n    require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n    );\\n    uint numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint amountIn,\\n    address[] memory path\\n  ) internal view returns (uint[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n      (uint reserveIn, uint reserveOut) = getReserves(\\n        factory,\\n        path[i],\\n        path[i + 1]\\n      );\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint amountOut,\\n    address[] memory path\\n  ) internal view returns (uint[] memory amounts) {\\n    require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n      (uint reserveIn, uint reserveOut) = getReserves(\\n        factory,\\n        path[i - 1],\\n        path[i]\\n      );\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc12296c90970725dc7dd56bf169050957c1e5fa78f9418955f0499ffd75323ee\"},\"contracts/libraries/UniswapV2LiquidityMathLibrary.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"@v60swap/core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@v60swap/core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/FullMath.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\\n// in terms of the underlying tokens\\nlibrary UniswapV2LiquidityMathLibrary {\\n  using SafeMath for uint256;\\n\\n  // computes the direction and magnitude of the profit-maximizing trade\\n  function computeProfitMaximizingTrade(\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) internal pure returns (bool aToB, uint256 amountIn) {\\n    aToB =\\n      FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\\n\\n    uint256 invariant = reserveA.mul(reserveB);\\n\\n    uint256 leftSide = Babylonian.sqrt(\\n      FullMath.mulDiv(\\n        invariant.mul(1000),\\n        aToB ? truePriceTokenA : truePriceTokenB,\\n        (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\\n      )\\n    );\\n    uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\\n\\n    if (leftSide < rightSide) return (false, 0);\\n\\n    // compute the amount that must be sent to move the price to the profit-maximizing price\\n    amountIn = leftSide.sub(rightSide);\\n  }\\n\\n  // gets the reserves after an arbitrage moves the price to the profit-maximizing ratio given an externally observed true price\\n  function getReservesAfterArbitrage(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB\\n  ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n    // first get reserves before the swap\\n    (reserveA, reserveB) = UniswapV2Library.getReserves(\\n      factory,\\n      tokenA,\\n      tokenB\\n    );\\n\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      \\\"UniswapV2ArbitrageLibrary: ZERO_PAIR_RESERVES\\\"\\n    );\\n\\n    // then compute how much to swap to arb to the true price\\n    (bool aToB, uint256 amountIn) = computeProfitMaximizingTrade(\\n      truePriceTokenA,\\n      truePriceTokenB,\\n      reserveA,\\n      reserveB\\n    );\\n\\n    if (amountIn == 0) {\\n      return (reserveA, reserveB);\\n    }\\n\\n    // now affect the trade to the reserves\\n    if (aToB) {\\n      uint amountOut = UniswapV2Library.getAmountOut(\\n        amountIn,\\n        reserveA,\\n        reserveB\\n      );\\n      reserveA += amountIn;\\n      reserveB -= amountOut;\\n    } else {\\n      uint amountOut = UniswapV2Library.getAmountOut(\\n        amountIn,\\n        reserveB,\\n        reserveA\\n      );\\n      reserveB += amountIn;\\n      reserveA -= amountOut;\\n    }\\n  }\\n\\n  // computes liquidity value given all the parameters of the pair\\n  function computeLiquidityValue(\\n    uint256 reservesA,\\n    uint256 reservesB,\\n    uint256 totalSupply,\\n    uint256 liquidityAmount,\\n    bool feeOn,\\n    uint kLast\\n  ) internal pure returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n    if (feeOn && kLast > 0) {\\n      uint rootK = Babylonian.sqrt(reservesA.mul(reservesB));\\n      uint rootKLast = Babylonian.sqrt(kLast);\\n      if (rootK > rootKLast) {\\n        uint numerator1 = totalSupply;\\n        uint numerator2 = rootK.sub(rootKLast);\\n        uint denominator = rootK.mul(5).add(rootKLast);\\n        uint feeLiquidity = FullMath.mulDiv(\\n          numerator1,\\n          numerator2,\\n          denominator\\n        );\\n        totalSupply = totalSupply.add(feeLiquidity);\\n      }\\n    }\\n    return (\\n      reservesA.mul(liquidityAmount) / totalSupply,\\n      reservesB.mul(liquidityAmount) / totalSupply\\n    );\\n  }\\n\\n  // get all current parameters from the pair and compute value of a liquidity amount\\n  // **note this is subject to manipulation, e.g. sandwich attacks**. prefer passing a manipulation resistant price to\\n  // #getLiquidityValueAfterArbitrageToPrice\\n  function getLiquidityValue(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidityAmount\\n  ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n    (uint256 reservesA, uint256 reservesB) = UniswapV2Library.getReserves(\\n      factory,\\n      tokenA,\\n      tokenB\\n    );\\n    IUniswapV2Pair pair = IUniswapV2Pair(\\n      UniswapV2Library.pairFor(factory, tokenA, tokenB)\\n    );\\n    bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n    uint kLast = feeOn ? pair.kLast() : 0;\\n    uint totalSupply = pair.totalSupply();\\n    return\\n      computeLiquidityValue(\\n        reservesA,\\n        reservesB,\\n        totalSupply,\\n        liquidityAmount,\\n        feeOn,\\n        kLast\\n      );\\n  }\\n\\n  // given two tokens, tokenA and tokenB, and their \\\"true price\\\", i.e. the observed ratio of value of token A to token B,\\n  // and a liquidity amount, returns the value of the liquidity in terms of tokenA and tokenB\\n  function getLiquidityValueAfterArbitrageToPrice(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    uint256 truePriceTokenA,\\n    uint256 truePriceTokenB,\\n    uint256 liquidityAmount\\n  ) internal view returns (uint256 tokenAAmount, uint256 tokenBAmount) {\\n    bool feeOn = IUniswapV2Factory(factory).feeTo() != address(0);\\n    IUniswapV2Pair pair = IUniswapV2Pair(\\n      UniswapV2Library.pairFor(factory, tokenA, tokenB)\\n    );\\n    uint kLast = feeOn ? pair.kLast() : 0;\\n    uint totalSupply = pair.totalSupply();\\n\\n    // this also checks that totalSupply > 0\\n    require(\\n      totalSupply >= liquidityAmount && liquidityAmount > 0,\\n      \\\"ComputeLiquidityValue: LIQUIDITY_AMOUNT\\\"\\n    );\\n\\n    (uint reservesA, uint reservesB) = getReservesAfterArbitrage(\\n      factory,\\n      tokenA,\\n      tokenB,\\n      truePriceTokenA,\\n      truePriceTokenB\\n    );\\n\\n    return\\n      computeLiquidityValue(\\n        reservesA,\\n        reservesB,\\n        totalSupply,\\n        liquidityAmount,\\n        feeOn,\\n        kLast\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x931d67aec02e77fb230eacb15785ae9f53b843a26cf7bc6de2fbc2e0aba99b39\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
